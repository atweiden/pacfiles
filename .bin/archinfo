#!/bin/bash

_usage_function() {
read -r -d '' _usage_string <<'EOF'
Usage:
  archinfo [-c|--color <color>]

Colors:
  black, red, green, yellow, blue (default), magenta, cyan, white
EOF
echo "$_usage_string"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      _usage_function
      exit 0
      ;;
    -c|--color)
      _user_selected_color="$2"
      # shift past argument and value
      shift
      shift
      ;;
    *)
      # unknown option
      _usage_function
      exit 1
      ;;
  esac
done

# _color {{{

declare -A _color_dict=(
  [black]='0'
  [red]='1'
  [green]='2'
  [yellow]='3'
  [blue]='4'
  [magenta]='5'
  [cyan]='6'
  [white]='7'
)

_color_code="${_color_dict[${_user_selected_color:-blue}]}"
_color="$(printf '\x1b[1;3%sm' "$_color_code")"
_clear="$(printf '\x1b[0m')"

# end _color }}}

# _title_case_function() {{{

_title_case_function() {
  echo "$1" | awk '{printf("%s%s\n", toupper(substr($0, 1, 1)), substr($0, 2))}'
}

# end _title_case_function() }}}

# _output_function() {{{

_output_function() {
  local _key
  local _value
  local _output

  _key="$1"
  _value="$2"
  _output="$(printf '%s%s:%s %s' "$_color" "$_key" "$_clear" "$_value")"

  echo "$_output"
}

# end _output_function() }}}
# _output_ram_function() {{{

_output_ram_function() {
  local _mem=()
  local _total
  local _available
  local _used
  local _ram
  local _output_ram

  mapfile -n 1 -s 1 -t _mem <<< "$(free -m)"
  _total="$(echo "${_mem[0]}" | awk '{print $2}')"
  _available="$(echo "${_mem[0]}" | awk '{print $7}')"
  _used="$((_total - _available))"
  _ram="$(printf '%s MB / %s MB' "$_used" "$_total")"
  _output_ram="$(_output_function 'RAM' "$_ram")"

  echo "$_output_ram"
}

# end _output_ram_function() }}}
# _output_os_function() {{{

_output_os_function() {
  local _architecture
  local _os
  local _output_os

  _architecture="$(uname -m)"
  _os="$(printf 'Arch %s' "$_architecture")"
  _output_os="$(_output_function 'OS' "$_os")"

  echo "$_output_os"
}

# end _output_os_function() }}}
# _output_kernel_function() {{{

_output_kernel_function() {
  local _kernel
  local _output_kernel

  _kernel="$(uname -r)"
  _output_kernel="$(_output_function 'Kernel' "$_kernel")"

  echo "$_output_kernel"
}

# end _output_kernel_function() }}}
# _output_hostname_function() {{{

_output_hostname_function() {
  local _hostname
  local _output_hostname

  _hostname="$(uname -n)"
  _output_hostname="$(_output_function 'Hostname' "$_hostname")"

  echo "$_output_hostname"
}

# end _output_hostname_function() }}}
# _output_cpu_function() {{{

_output_cpu_function() {
  local _cpuinfo=()
  local _cpu
  local _output_cpu

  mapfile -n 1 -s 4 -t _cpuinfo <<< "$(cat /proc/cpuinfo)"
  _cpu="$(echo "${_cpuinfo[@]}" | sed 's/^.*:\s\+//')"
  _output_cpu="$(_output_function 'CPU' "$_cpu")"

  echo "$_output_cpu"
}

# end _output_cpu_function() }}}
# _output_uptime_function() {{{

_output_uptime_function() {
  local _uptime
  local _day
  local _hour
  local _minute
  local _fmt_uptime_day
  local _fmt_uptime_hour_minute
  local _fmt_uptime
  local _output_uptime

  _uptime="$(awk -F'.' '{print $1}' /proc/uptime)"
  _day="$((_uptime / 86400))"
  _uptime="$((_uptime % 86400))"
  _hour="$((_uptime / 3600))"
  _uptime="$((_uptime % 3600))"
  _minute="$((_uptime / 60))"

  if [[ $_day == 1 ]]; then
    _fmt_uptime_day="$(printf '%d day, ' "$_day")"
  elif [[ $_day -gt 1 ]]; then
    _fmt_uptime_day="$(printf '%d days, ' "$_day")"
  fi

  _fmt_uptime_hour_minute="$(printf '%d:%02d' "$_hour" "$_minute")"
  _fmt_uptime="$(printf '%s%s' "$_fmt_uptime_day" "$_fmt_uptime_hour_minute")"
  _output_uptime="$(_output_function 'Uptime' "$_fmt_uptime")"

  echo "$_output_uptime"
}

# end _output_uptime_function() }}}
# _output_window_manager_function() {{{

_output_window_manager_function() {
  declare -A _window_manager_dict=(
    [openbox]='Openbox'
  )

  local _process_array=()
  local _window_manager
  local _output_window_manager

  mapfile -s 1 -t _process_array <<< "$(ps -u "$USER" \
                                      | FS='\n' awk '{print $4}')"

  _window_manager='None found'
  for _wm in "${!_window_manager_dict[@]}"; do
    for _process in "${_process_array[@]}"; do
      if [[ "$_wm" == "$_process" ]]; then
        _window_manager="${_window_manager_dict[$_wm]}"
      fi
    done
  done

  _output_window_manager="$(_output_function \
    'Window Manager' \
    "$_window_manager")"

  echo "$_output_window_manager"
}

# end _output_window_manager_function() }}}
# _output_shell_function() {{{

_output_shell_function() {
  local _shell
  local _output_shell

  _shell="$(_title_case_function "$(basename "$SHELL")")"
  _output_shell="$(_output_function 'Shell' "$_shell")"

  echo "$_output_shell"
}

# end _output_shell_function() }}}
# _output_packages_function() {{{

_output_packages_function() {
  local _packages
  local _output_packages

  _packages="$(pacman -Qq | wc -l)"
  _output_packages="$(_output_function 'Packages' "$_packages")"

  echo "$_output_packages"
}

# end _output_packages_function() }}}
# _output_filesystem_function() {{{

_output_filesystem_function() {
  local _mount
  local _df=()
  local _filesystem_type
  local _filesystem_size
  local _filesystem_used
  local _filesystem_name
  local _filesystem
  local _output_filesystem

  _mount="${1:-/home}"

  mapfile -s 1 -t _df <<< "$(df -TPh "$_mount")"
  _filesystem_type="$(echo "${_df[0]}" | awk '{print $2}')"
  _filesystem_size="$(echo "${_df[0]}" | awk '{print $3}')"
  _filesystem_used="$(echo "${_df[0]}" | awk '{print $4}')"

  if [[ "$_mount" == '/' ]]; then
    _filesystem_name='Root FS'
  else
    _filesystem_name="$(_title_case_function "$(basename "$_mount")") FS"
  fi

  _filesystem="$(printf '%s / %s (%s)' \
    "$_filesystem_used" \
    "$_filesystem_size" \
    "$_filesystem_type")"
  _output_filesystem="$(_output_function "$_filesystem_name" "$_filesystem")"

  echo "$_output_filesystem"
}

# end _output_filesystem_function() }}}

# _result_array {{{

_result_array=(
  "$(_output_os_function)"
  "$(_output_hostname_function)"
  "$(_output_kernel_function)"
  "$(_output_uptime_function)"
  "$(_output_window_manager_function)"
  "$(_output_packages_function)"
  "$(_output_ram_function)"
  "$(_output_cpu_function)"
  "$(_output_shell_function)"
  "$(_output_filesystem_function '/home')"
  ''
  ''
  ''
)

# end _result_array }}}
# _output_array {{{

_output_array=(
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "${_result_array[0]}"
  "$_color"
  "${_result_array[1]}"
  "$_color"
  "${_result_array[2]}"
  "$_color"
  "${_result_array[3]}"
  "$_color"
  "${_result_array[4]}"
  "$_color"
  "${_result_array[5]}"
  "$_color"
  "${_result_array[6]}"
  "$_color"
  "${_result_array[7]}"
  "$_color"
  "${_result_array[8]}"
  "$_color"
  "${_result_array[9]}"
  "$_color"
  "${_result_array[10]}"
  "$_color"
  "${_result_array[11]}"
  "$_color"
  "${_result_array[12]}"
  "$_clear"
)

# end _output_array }}}
# _archinfo {{{

read -r -d '' _archinfo_string <<'EOF'
%s
%s               +
%s               #
%s              ###
%s             #####
%s             ######
%s            ; #####;            %s
%s           +##.#####            %s
%s          +##########           %s
%s         #############;         %s
%s        ###############+        %s
%s       #######   #######        %s
%s     .######;     ;###;`".      %s
%s    .#######;     ;#####.       %s
%s    #########.   .########`     %s
%s   ######'           '######    %s
%s  ;####                 ####;   %s
%s  ##'                     '##   %s
%s #'                         `#  %s
%s
EOF

_archinfo="$(printf "$_archinfo_string\\n" "${_output_array[@]}")"

# end _archinfo }}}

echo "${_archinfo}"

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
