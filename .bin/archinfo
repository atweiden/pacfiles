#!/bin/bash

# _usage_function() {{{

_usage_function() {
read -d '' _usage_string <<'EOF'
Usage:
  archinfo [-c|--color <color>]

Colors:
  black, red, green, yellow, blue (default), magenta, cyan, white
EOF
echo "$_usage_string"
}

# end _usage_function() }}}

while [[ $# -gt 0 ]]; do
  _key="$1"
  case "$_key" in
    -h|--help)
      _usage_function
      exit 0
      ;;
    -c|--color)
      _user_selected_color="$2"
      # shift past argument and value
      shift
      shift
      ;;
    *)
      # unknown option
      _usage_function
      exit 1
      ;;
  esac
done

# _color {{{

declare -A _color_dict=(
  [black]='0'
  [red]='1'
  [green]='2'
  [yellow]='3'
  [blue]='4'
  [magenta]='5'
  [cyan]='6'
  [white]='7'
)

_color_code="${_color_dict[${_user_selected_color:-blue}]}"
_color=$(printf "\x1b[1;3%sm" "$_color_code")
_clear=$(printf "\x1b[0m")

# end _color }}}

# _title_case_function() {{{

_title_case_function() {
  echo "$1" | awk '{printf("%s%s\n", toupper(substr($0, 1, 1)), substr($0, 2))}'
}

# end _title_case_function() }}}

# _output_function() {{{

_output_function() {
  local _key="$1"
  local _value="$2"
  local _output=$(printf '%s%s:%s %s' "$_color" "$_key" "$_clear" "$_value")
  echo "$_output"
}

# end _output_function() }}}
# _output_ram_function() {{{

_output_ram_function() {
  local _mem=()
  mapfile -n 1 -s 1 -t _mem <<< $(free -m)
  local _total="$(echo ${_mem[0]} | awk '{print $2}')"
  local _available="$(echo ${_mem[0]} | awk '{print $7}')"
  local _used="$(($_total - $_available))"
  local _ram="$(printf '%s MB / %s MB' $_used $_total)"
  local _output_ram=$(_output_function 'RAM' "$_ram")
  echo "$_output_ram"
}

# end _output_ram_function() }}}
# _output_os_function() {{{

_output_os_function() {
  local _architecture="$(uname -m)"
  local _os="$(printf 'Arch %s' $_architecture)"
  local _output_os=$(_output_function 'OS' "$_os")
  echo "$_output_os"
}

# end _output_os_function() }}}
# _output_kernel_function() {{{

_output_kernel_function() {
  local _kernel="$(uname -r)"
  local _output_kernel=$(_output_function 'Kernel' "$_kernel")
  echo "$_output_kernel"
}

# end _output_kernel_function() }}}
# _output_hostname_function() {{{

_output_hostname_function() {
  local _hostname="$(uname -n)"
  local _output_hostname=$(_output_function 'Hostname' "$_hostname")
  echo "$_output_hostname"
}

# end _output_hostname_function() }}}
# _output_cpu_function() {{{

_output_cpu_function() {
  local _cpuinfo=()
  mapfile -n 1 -s 4 -t _cpuinfo <<< $(cat /proc/cpuinfo)
  local _cpu=$(echo ${_cpuinfo[@]} | sed "s/^.*:\s\+//")
  local _output_cpu=$(_output_function 'CPU' "$_cpu")
  echo "$_output_cpu"
}

# end _output_cpu_function() }}}
# _output_uptime_function() {{{

_output_uptime_function() {
  local _uptime=$(cat /proc/uptime | awk -F'.' '{print $1}')
  local _day=$(($_uptime / 86400))
  _uptime=$(($_uptime % 86400))
  local _hour=$(($_uptime / 3600))
  _uptime=$(($_uptime % 3600))
  local _minute=$(($_uptime / 60))

  local _fmt_uptime_day=''
  if [[ "$_day" == '1' ]]; then
    _fmt_uptime_day="$(printf '%d day, ' $_day)"
  elif [[ "$_day" > '1' ]]; then
    _fmt_uptime_day="$(printf '%d days, ' $_day)"
  fi

  local _fmt_uptime_hour_minute="$(printf '%d:%02d' $_hour $_minute)"
  local _fmt_uptime=$(printf '%s%s' \
    "$_fmt_uptime_day" \
    "$_fmt_uptime_hour_minute")
  local _output_uptime=$(_output_function 'Uptime' "$_fmt_uptime")
  echo "$_output_uptime"
}

# end _output_uptime_function() }}}
# _output_window_manager_function() {{{

_output_window_manager_function() {
  declare -A _window_manager_dict=(
    [openbox]='Openbox'
  )

  local _process_array=()
  mapfile -s 1 -t _process_array <<< $(ps -u $USER | FS="\n" awk '{print $4}')

  local _window_manager='None found'
  for _wm in "${!_window_manager_dict[@]}"; do
    for _process in ${_process_array[@]}; do
      if [[ "$_wm" == "$_process" ]]; then
        _window_manager="${_window_manager_dict[$_wm]}"
      fi
    done
  done

  local _output_window_manager=$(_output_function \
    'Window Manager' \
    "$_window_manager")
  echo "$_output_window_manager"
}

# end _output_window_manager_function() }}}
# _output_shell_function() {{{

_output_shell_function() {
  local _shell="$(_title_case_function $(basename $SHELL))"
  local _output_shell=$(_output_function 'Shell' "$_shell")
  echo "$_output_shell"
}

# end _output_shell_function() }}}
# _output_packages_function() {{{

_output_packages_function() {
  local _packages=$(pacman -Qq | wc -l)
  local _output_packages=$(_output_function 'Packages' "$_packages")
  echo "$_output_packages"
}

# end _output_packages_function() }}}
# _output_filesystem_function() {{{

_output_filesystem_function() {
  local _mount="${1:-/home}"
  local _df=()
  mapfile -s 1 -t _df <<< "$(df -TPh $_mount)"
  local _filesystem_type=$(echo "${_df[0]}" | awk '{print $2}')
  local _filesystem_size=$(echo "${_df[0]}" | awk '{print $3}')
  local _filesystem_used=$(echo "${_df[0]}" | awk '{print $4}')
  local _filesystem_name=''
  if [[ "$_mount" == '/' ]]; then
    _filesystem_name='Root FS'
  else
    _filesystem_name="$(_title_case_function $(basename "$_mount")) FS"
  fi
  local _filesystem="$(printf '%s / %s (%s)' \
    $_filesystem_used \
    $_filesystem_size \
    $_filesystem_type)"
  local _output_filesystem=$(_output_function \
    "$_filesystem_name" \
    "$_filesystem")
  echo "$_output_filesystem"
}

# end _output_filesystem_function() }}}

# _result_array {{{

_result_array=(
  "$(_output_os_function)"
  "$(_output_hostname_function)"
  "$(_output_kernel_function)"
  "$(_output_uptime_function)"
  "$(_output_window_manager_function)"
  "$(_output_packages_function)"
  "$(_output_ram_function)"
  "$(_output_cpu_function)"
  "$(_output_shell_function)"
  "$(_output_filesystem_function '/home')"
  '' '' ''
)

# end _result_array }}}
# _output_array {{{

_output_array=(
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "$_color"
  "${_result_array[0]}"
  "$_color"
  "${_result_array[1]}"
  "$_color"
  "${_result_array[2]}"
  "$_color"
  "${_result_array[3]}"
  "$_color"
  "${_result_array[4]}"
  "$_color"
  "${_result_array[5]}"
  "$_color"
  "${_result_array[6]}"
  "$_color"
  "${_result_array[7]}"
  "$_color"
  "${_result_array[8]}"
  "$_color"
  "${_result_array[9]}"
  "$_color"
  "${_result_array[10]}"
  "$_color"
  "${_result_array[11]}"
  "$_color"
  "${_result_array[12]}"
  "$_clear"
)

# end _output_array }}}
# _arch {{{

read -d '' _arch_string <<'EOF'
%s
%s               +
%s               #
%s              ###
%s             #####
%s             ######
%s            ; #####;            %s
%s           +##.#####            %s
%s          +##########           %s
%s         #############;         %s
%s        ###############+        %s
%s       #######   #######        %s
%s     .######;     ;###;`".      %s
%s    .#######;     ;#####.       %s
%s    #########.   .########`     %s
%s   ######'           '######    %s
%s  ;####                 ####;   %s
%s  ##'                     '##   %s
%s #'                         `#  %s
%s
EOF

_arch=$(printf "$_arch_string\n" "${_output_array[@]}")

# end _arch }}}

echo "${_arch}"

# vim: set filetype=sh foldmethod=marker foldlevel=0:
