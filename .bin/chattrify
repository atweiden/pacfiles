#!/bin/bash

# ----------------------------------------------------------------------------
# chattrify: disable Btrfs copy-on-write (CoW) on directories
# ----------------------------------------------------------------------------

# defaults
_PERMISSIONS='755'
_USER="$(id -un)"
_GROUP="$(id -gn)"

_usage() {
read -r -d '' _usage_string <<EOF
Usage:
  chattrify [-h|--help]
            [-v|--verbose]
            [-p|--permissions <octal>]
            [-u|--user <username>]
            [-g|--group <groupname>]
            <directory> [<directory> <directory>..]

Options:
  -h, --help                 Show this help text
  -v, --verbose              Show verbose output
  -p, --permissions <octal>  Octal file mode bits (defaults to "$_PERMISSIONS")
  -u, --user <username>      Named user to own file (defaults to "$_USER")
  -g, --group <groupname>    Named group to own file (defaults to "$_GROUP")

Positionals:
  <directory>                Path to directory
EOF
echo "$_usage_string"
}

_POSITIONAL=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      _usage
      exit 0
      ;;
    -v|--verbose)
      _VERBOSE=true
      shift
      ;;
    -p|--permissions)
      shift
      _PERMISSIONS="$1"
      shift
      ;;
    -u|--user)
      shift
      _USER="$1"
      shift
      ;;
    -g|--group)
      shift
      _GROUP="$1"
      shift
      ;;
    *)
      _POSITIONAL+=("$1")
      shift
      ;;
  esac
done

# restore positional params
set -- "${_POSITIONAL[@]}"

_log() {
  local _cmdline
  local _text_begin
  local _text_end

  _cmdline="$1"
  _text_begin="$2"
  _text_end="$3"

  [[ "$_VERBOSE" == true ]] && echo -n "$_text_begin"
  eval "$_cmdline"
  [[ "$_VERBOSE" == true ]] && echo "$_text_end"
}

_chattrify() {
  local _path
  local _path_bak
  local _permissions
  local _user
  local _group
  local _cmdline
  local _text_begin
  local _text_end

  # remove trailing forward slashes from directory path
  _path="$(echo "$1" | sed 's,/\+$,,')"
  _path_bak="${_path}_old"
  _permissions="$2"
  _user="$3"
  _group="$4"

  if [[ -d "$_path" ]]; then
    _cmdline="mv $_path $_path_bak"
    _text_begin="Moving original directory '$_path' to '$_path_bak'... "
    _text_end="done"
    _log "$_cmdline" "$_text_begin" "$_text_end"
    unset _cmdline _text_begin _text_end
  else
    echo "Sorry, couldn't find existing readable directory at '$_path'"
    exit 1
  fi

  _cmdline="mkdir -p $_path"
  _text_begin="Creating new directory '$_path'... "
  _text_end="done"
  _log "$_cmdline" "$_text_begin" "$_text_end"
  unset _cmdline _text_begin _text_end

  _cmdline="chmod $_permissions $_path"
  _text_begin="Setting permissions on new directory '$_path'... "
  _text_end="done"
  _log "$_cmdline" "$_text_begin" "$_text_end"
  unset _cmdline _text_begin _text_end

  _cmdline="chown $_user:$_group $_path"
  _text_begin="Setting owner on new directory '$_path'... "
  _text_end="done"
  _log "$_cmdline" "$_text_begin" "$_text_end"
  unset _cmdline _text_begin _text_end

  _cmdline="chattr -R +C $_path"
  _text_begin="Disabling CoW on new directory '$_path'... "
  _text_end="done"
  _log "$_cmdline" "$_text_begin" "$_text_end"
  unset _cmdline _text_begin _text_end

  if [[ -d "$_path_bak" ]]; then
    _cmdline="find $_path_bak -mindepth 1 -maxdepth 1 -print"
    _cmdline="$_cmdline | while read _f; do cp -dpr \$_f $_path; done"
    _text_begin="Copying original files into new directory '$_path'... "
    _text_end="done"
    _log "$_cmdline" "$_text_begin" "$_text_end"
    unset _cmdline _text_begin _text_end
  fi

  if [[ -d "${_path_bak}" ]]; then
    _cmdline="rm -rf $_path_bak"
    _text_begin="Removing backup of original directory '$_path_bak'... "
    _text_end="done"
    _log "$_cmdline" "$_text_begin" "$_text_end"
    unset _cmdline _text_begin _text_end
  fi
}

for _dir in "$@"; do
  _chattrify "$_dir" "$_PERMISSIONS" "$_USER" "$_GROUP"
done

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
