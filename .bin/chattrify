#!/bin/bash

# ----------------------------------------------------------------------------
# chattrify: disable Btrfs copy-on-write (CoW) for single directories
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
#
# Args
#
#   arg 1 = DIRECTORY to disable CoW on       (required)
#   arg 2 = PERMISSIONS to chmod DIRECTORY to (optional)
#   arg 3 = USER to chown DIRECTORY to        (optional)
#   arg 4 = GROUP to chown DIRECTORY to       (optional)
#
# Examples
#
#   chattrify "DIRECTORY" "PERMISSIONS" "USER" "GROUP"
#   chattrify "/var/log/journal" "755" "root" "systemd-journal"
#   chattrify ~/.gnupg

# _usage_function() {{{

_usage_function() {
read -r -d '' _usage_string <<'EOF'
Usage:
  chattrify [-h|--help]
  chattrify [-v|--verbose] <directory> [permissions] [user] [group]

Options:
  -h, --help     Show this help text
  -v, --verbose  Verbose output

Positionals:
  directory      Directory to disable copy-on-write on (required)
  permissions    Permissions to chmod directory to     (optional)
  user           User to chown directory to            (optional)
  group          Group to chown directory to           (optional)
EOF
echo "$_usage_string"
}

# end _usage_function() }}}

_positional=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      _usage_function
      exit 0
      ;;
    -v|--verbose)
      _verbose=true
      shift
      ;;
    *)
      _positional+=("$1")
      shift
      ;;
  esac
done

# restore positional params
set -- "${_positional[@]}"

log() {
  local _cmdline
  local _text_begin
  local _text_end

  _cmdline="$1"
  _text_begin="$2"
  _text_end="$3"

  [[ -n "${_verbose}" ]] && echo -n "${_text_begin}"
  eval "${_cmdline}"
  [[ -n "${_verbose}" ]] && echo "${_text_end}"
}

chattrify() {
  local _path
  local _path_bak
  local _permissions
  local _user
  local _group
  local _cmdline
  local _text_begin
  local _text_end

  if ! (($#)); then
    echo "No arguments supplied"
    exit 1
  fi

  # remove trailing forward slashes from directory path
  _path="$(echo "$1" | sed 's,/\+$,,')"
  _path_bak="${_path}_old"
  _permissions="${2:-755}"
  _user="${3:-$(id -un)}"
  _group="${4:-$(id -gn)}"

  if [[ -d "${_path}" ]]; then
    _cmdline="mv ${_path} ${_path_bak}"
    _text_begin="Moving original directory '${_path}' to '${_path_bak}'... "
    _text_end="done"
    log "${_cmdline}" "${_text_begin}" "${_text_end}"
    unset _cmdline _text_begin _text_end
  else
    echo "Sorry, couldn't find existing readable directory at '${_path}'"
    exit 1
  fi

  _cmdline="mkdir -p ${_path}"
  _text_begin="Creating new directory '${_path}'... "
  _text_end="done"
  log "${_cmdline}" "${_text_begin}" "${_text_end}"
  unset _cmdline _text_begin _text_end

  _cmdline="chmod ${_permissions} ${_path}"
  _text_begin="Setting permissions on new directory '${_path}'... "
  _text_end="done"
  log "${_cmdline}" "${_text_begin}" "${_text_end}"
  unset _cmdline _text_begin _text_end

  _cmdline="chown ${_user}:${_group} ${_path}"
  _text_begin="Setting owner on new directory '${_path}'... "
  _text_end="done"
  log "${_cmdline}" "${_text_begin}" "${_text_end}"
  unset _cmdline _text_begin _text_end

  _cmdline="chattr -R +C ${_path}"
  _text_begin="Disabling CoW on new directory '${_path}'... "
  _text_end="done"
  log "${_cmdline}" "${_text_begin}" "${_text_end}"
  unset _cmdline _text_begin _text_end

  if [[ -d "${_path_bak}" ]]; then
    _cmdline="find ${_path_bak} -mindepth 1 -maxdepth 1 -print"
    _cmdline="$_cmdline | while read _f; do cp -dpr \$_f ${_path}; done"
    _text_begin="Copying original files into new directory '${_path}'... "
    _text_end="done"
    log "${_cmdline}" "${_text_begin}" "${_text_end}"
    unset _cmdline _text_begin _text_end
  fi

  if [[ -d "${_path_bak}" ]]; then
    _cmdline="rm -rf ${_path_bak}"
    _text_begin="Removing backup of original directory '${_path_bak}'... "
    _text_end="done"
    log "${_cmdline}" "${_text_begin}" "${_text_end}"
    unset _cmdline _text_begin _text_end
  fi
}

chattrify "$@"

# vim:set filetype=sh foldmethod=marker foldlevel=0:
