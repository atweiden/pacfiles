# xrender or glx, glx uses opengl
backend = "glx";

glx-no-stencil = true;
# comment out for nouveau, uncomment for nvidia
#glx-copy-from-front = false;
# slow and safe
glx-swap-method = "undefined";

# enable window shadows
shadow = true;

# no shadows for drag-and-drop
no-dnd-shadow = true;

# no shadows for docked windows (like panels etc)
no-dock-shadow = false;

# for translucent windows
clear-shadow = true;

# shadow visual settings
shadow-radius = 10;
shadow-offset-x = -12;
shadow-offset-y = -12;
shadow-opacity = 0.4;

# do not shadow certain windows
shadow-exclude = [
    "_GTK_FRAME_EXTENTS@:c"
];

# shadow shaped windows (with alpha tested corners)
shadow-ignore-shaped = false;

# opacity settings
menu-opacity     = 1;
inactive-opacity = 1;
active-opacity   = 1;
frame-opacity    = 1;
inactive-opacity-override = false;
alpha-step = 0.06;

blur-background-fixed = false;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
];

# fade during opacity changes, disabled (effect annoys me)
fading = false;
# time between steps in a fade in milliseconds
fade-delta = 4;
# opacity change between steps while fading in
fade-in-step = 0.03;
# opacity change between steps while fading out
fade-out-step = 0.03;
# fade windows in/out when opening/closing
# no-fading-openclose = true;

# windows that should not be faded
fade-exclude = [ ];

# try to detect WM windows and mark them as active
mark-wmwin-focused = true;
# mark all non-WM but override-redirect windows active (e.g. menus)
mark-ovredir-focused = true;
# use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead
# of using FocusIn/Out events, usually more reliable but depends on an
# EWMH-compliant WM
use-ewmh-active-win = true;
# detect rounded corners and treat them as rectangular when
# --shadow-ignore-shaped is on
detect-rounded-corners = true;

# detect _NET_WM_OPACITY on client windows, useful for window managers not
# passing _NET_WM_OPACITY of client windows to frame windows, this prevents
# opacity being ignored for some apps, for example without this enabled my
# xfce4-notifyd is 100% opacity no matter what
detect-client-opacity = true;

# specify refresh rate of the screen, if not specified or 0, compton will try
# detecting this with X RandR extension
refresh-rate = 0;

# vsync method, available options:
# none: no vsync
# drm: driver specific
# opengl: SGI_video_sync opengl ext
# opengl-oml: OML_sync_control opengl ext
# opengl-swc: SGI_swap_control opengl ext, works best with nvidia, glx only
# opengl-mswc: MESA_swap_control opengl ext, like above but mesa
vsync = "opengl-mswc";

# enable DBE painting mode, intended to use with VSync to (hopefully) eliminate
# tearing, reported to have no effect, though
dbe = false;
# painting on X Composite overlay window, recommended
paint-on-overlay = true;

# limit compton to repaint at most once every 1 / refresh_rate second to boost
# performance, this should not be used with --vsync drm/opengl/opengl-oml as
# they essentially does --sw-opti's job already, unless you wish to specify a
# lower refresh rate than the actual value
# doesn't have any performance effect on my setup, actually makes things laggy
sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize
# performance for full-screen windows, like games
# known to cause flickering when redirecting/unredirecting windows
# paint-on-overlay may make the flickering less obvious
unredir-if-possible = true;

# conditions for windows that are always considered focused
focus-exclude = [ ];

# use WM_TRANSIENT_FOR to group windows, and consider windows in the same group
# focused at the same time
detect-transient = true;
# use WM_CLIENT_LEADER to group windows, and consider windows in the same group
# focused at the same time
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too
detect-client-leader = true;

# window type settings

wintypes: {
    tooltip = {
        fade = true;
        shadow = false;
        opacity = 0.85;
        focus = true;
    };
};
